class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int breakIndex = -1;
        for(int i = nums.size()-2; i>=0 ;i--){
            if(nums[i]<nums[i+1]){
                breakIndex = i;
                break;
            }
        }

        if(breakIndex == -1){
            reverse(nums.begin(), nums.end());
            return;
        }

        for(int i = nums.size()-1; i > breakIndex; i--){
            if(nums[i]> nums[breakIndex])
            {
                swap(nums[i],nums[breakIndex]);
                break;
            }
        }

        reverse(nums.begin() + breakIndex +1, nums.end());
    }
};



//////////////////////////////////////////////////////////////

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        long long globalMax = INT_MIN;
        long long currMax = 0;
        for(int i=0;i<nums.size();i++){
            currMax+=nums[i];
            globalMax = max(globalMax,currMax);
            if(currMax<0){
                currMax=0;
            }
        }
        return globalMax;
    }
};